data Nat : Type where
| zero : Nat
| suc (n : Nat) : Nat
end

def caseNat (P : (n : Nat) : Type)
(cz : P zero)
(cs (n : Nat) : P (suc n))
(n : Nat) : P n
where
| P cz cs zero = cz
| P cz cs (suc n) = cs n
end

def dynamicUnif (n : Nat) : Nat where
caseNat * zero ((n : Nat) -> n)
end