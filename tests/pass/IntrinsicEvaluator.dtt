data Tp : Type where
| Bool' : Tp
| Arr' (A B : Tp) : Tp
end

data Ctx : Type where
| emp : Ctx
| ext (As : Ctx) (A : Tp) : Ctx
end

data In (A : Tp) :: (As : Ctx) : Type where
| here {As : Ctx} : In A (ext As A)
| there {B : Tp} {As : Ctx} (i : In A As) : In A (ext As B)
end

data Bool : Type where
| true/false : Bool
end

def if {C : Type} (b : Bool) (ct cf : C) : C where
| true ct cf = ct
| false ct cf = cf
end

def El (A : Tp) : Type where
| Bool' = Bool
| (Arr' A B) = (a : El A) : El B
end

data Env (As : Ctx) : Type where
| nil : Env emp
| cons {As : Ctx} (as : Env As) {A : Tp} (a : El A) : Env (ext As A)
end

data Exp (As : Ctx) :: (A : Tp) : Type where
| var' {A : Tp} (i : In A As) : Exp As A
| true'/false' : Exp As Bool'
| if' {C : Tp} (b : Exp As Bool') (ct cf : Exp As C) : Exp As C
| lam' {A B : Tp} (b : Exp (ext As A) B) : Exp As (Arr' A B)
| app' {A B : Tp} (f : Exp As (Arr' A B)) (a : Exp As A) : Exp As B
end

def lookup {A : *} {As : *} (i : In A As) (as : Env As) : El A where
| here (cons as a) = a
| (there i) (cons as a) = lookup i as
end

def eval {As : *} {A : *} (a : Exp As A) (as : Env As) : El A where
| (var' i) as = lookup i as
| true' as = true
| false' as = false
| (if' b ct cf) as = if (eval b as) (eval ct as) (eval cf as)
| (lam' {*} {A} b) as = (a : El A) -> eval b (cons as a)
| (app' f a) as = (eval f as) (eval a as)
end
