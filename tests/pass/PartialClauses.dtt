data Nat : Type where
| zero : Nat
| suc (n : Nat) : Nat
end

data Vec (A : Type) :: (n : Nat) : Type where
| nil : Vec A zero
| cons {n : Nat} (x : A) (xs : Vec A n) : Vec A (suc n)
end

def add (n,m : Nat) : Nat where
| zero = (m : *) -> m
| (suc n) = (m : *) -> suc (add n m)
end

def mult (n,m : Nat) : Nat where
| zero = (m : *) -> zero
| (suc n) = (m : *) -> add m (mult n m)
end

def append {A : Type} {n,m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (add n m) where
| nil = (ys : *) -> ys
| (cons x xs) = (ys : *) -> cons x (append xs ys)
end
